buildscript {
  repositories {
    mavenCentral()
    jcenter()
    maven {
      url 'http://repo.spring.io/plugins-release'
    }
  }

  dependencies {
    classpath group: 'org.gradle.api.plugins', name: 'gradle-cargo-plugin', version: '1.5'
    classpath group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.2.4'
    classpath group: 'net.saliman', name: 'gradle-cobertura-plugin', version: '2.2.2'
    classpath group: 'org.kt3k.gradle.plugin', name: 'coveralls-gradle-plugin', version: '0.4.1'
    classpath group: 'org.flywaydb', name: 'flyway-gradle-plugin', version: '3.0'
  }
}

apply plugin: 'java'
sourceCompatibility = 1.7
targetCompatibility = 1.7

apply plugin: 'maven'
group = 'org.cloudfoundry.identity'
version = '1.7.1-SNAPSHOT'

apply plugin: 'war'
description = 'Cloud Foundry Login Server'

task packageSources(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource

}
artifacts.archives packageSources
repositories {
  maven { url "http://maven.springframework.org/release" }
  maven { url "http://maven.springframework.org/milestone" }
  maven { url "http://maven.springframework.org/snapshot" }
  maven { url "http://objectstyle.org/maven2/" }
  maven { url "http://repo.springsource.org/ext-release-local" }
  maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
  Project identityParent = project(':cloudfoundry-identity-parent')
  Project identityCommon = project(':cloudfoundry-identity-parent:cloudfoundry-identity-common')

  compile identityCommon
  compile group: 'org.springframework', name: 'spring-context-support', version:'4.0.3.RELEASE'
  compile group: 'org.springframework.security', name: 'spring-security-openid', version:'3.2.3.RELEASE'
  compile group: 'org.springframework.security.extensions', name: 'spring-security-saml2-core', version:'1.0.0.RC3-SNAPSHOT'
  compile group: 'org.thymeleaf', name: 'thymeleaf-spring4', version:'2.1.2.RELEASE'
  compile group: 'nz.net.ultraq.thymeleaf', name: 'thymeleaf-layout-dialect', version:'1.2.3'
  compile group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity3', version:'2.1.1.RELEASE'
  compile group: 'javax.mail', name: 'mail', version:'1.4.7'
  testCompile group: 'org.springframework', name: 'spring-test', version:'4.0.3.RELEASE'
/*  testCompile group: 'net.java.dev.jna', name: 'jna', version: '4.1.0'*/
/*  testCompile group: 'net.java.dev.jna', name: 'jna-platform', version: '4.1.0'*/
  testCompile group: 'junit', name: 'junit', version:'4.11'
  testCompile group: 'org.hamcrest', name: 'hamcrest-all', version:'1.3'
  testCompile group: 'org.mockito', name: 'mockito-all', version:'1.8.5'
  testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version:'2.39.0'
  testCompile group: 'com.github.detro.ghostdriver', name: 'phantomjsdriver', version:'1.1.0'
  testCompile group: 'dumbster', name: 'dumbster', version:'1.6'
/*
  compile group: 'org.springframework', name: 'spring-core', version:'4.0.3.RELEASE'
  compile group: 'org.springframework', name: 'spring-expression', version:'4.0.3.RELEASE'
  compile group: 'org.springframework', name: 'spring-beans', version:'4.0.3.RELEASE'
  compile group: 'org.springframework', name: 'spring-context', version:'4.0.3.RELEASE'
  compile group: 'org.springframework', name: 'spring-aop', version:'4.0.3.RELEASE'
  compile group: 'org.springframework', name: 'spring-web', version:'4.0.3.RELEASE'
  compile group: 'org.springframework', name: 'spring-webmvc', version:'4.0.3.RELEASE'
  compile(group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version:'1.0.5.RELEASE') {
    exclude(module: 'commons-codec')
  }
  compile group: 'org.aspectj', name: 'aspectjweaver', version:'1.6.9'
  compile group: 'org.aspectj', name: 'aspectjrt', version:'1.6.9'
  compile(group: 'edu.vt.middleware', name: 'vt-password', version:'3.1.1') {
    exclude(module: 'bcprov-jdk15')
    exclude(module: 'commons-logging')
  }
  compile(group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.3.3') {
    exclude(module: 'commons-logging')
  }
  compile group: 'javax.inject', name: 'javax.inject', version:'1'
  compile group: 'org.springframework.security', name: 'spring-security-web', version:'3.2.3.RELEASE'
  compile group: 'commons-logging', name: 'commons-logging', version:'1.1.1'
  compile group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.7.2'
  compile group: 'javax.servlet', name: 'jstl', version:'1.2'
  runtime group: 'org.springframework.security', name: 'spring-security-config', version:'3.2.3.RELEASE'
  runtime group: 'log4j', name: 'log4j', version:'1.2.14'
  testCompile group: 'com.jayway.jsonpath', name: 'json-path', version:'0.9.1'
  testCompile group: 'com.jayway.jsonpath', name: 'json-path-assert', version:'0.9.1'
  testCompile group: 'org.apache.commons', name: 'commons-io', version:'1.3.2'
  testCompile group: 'org.springframework.security', name: 'spring-security-jwt', version:'1.0.1.RELEASE'
*/
  providedCompile(group: 'javax.servlet', name: 'javax.servlet-api', version:'3.0.1')
  providedCompile(group: 'javax.servlet', name: 'jsp-api', version:'2.0')
}

task buildInfo {
  def cmd = "git show -s --format=\"git.commit.id.abbrev=%h%ngit.commit.time=%ai\""
  def proc = cmd.execute()
  // TODO: Generate git.properties
}

apply plugin: 'cargo'

cargoStartLocal.dependsOn assemble
cargoRunLocal.dependsOn assemble

task run(dependsOn: cargoRunLocal)

cargo {
  containerId = 'tomcat7x'
  port = 8080
  
  String uaaVersion = project.subprojects.find { it.name.equals('cloudfoundry-identity-parent') }.version

  deployable {
    file = file('uaa/build/libs/cloudfoundry-identity-uaa-' + uaaVersion + '.war')
    context = 'uaa'
  }

  deployable {
    file = file('uaa/samples/api/build/libs/cloudfoundry-identity-api-' + uaaVersion + '.war')
    context = 'api'
  }

  deployable {
    file = file('uaa/samples/app/build/libs/cloudfoundry-identity-app-' + uaaVersion + '.war')
    context = 'app'
  }

  local {
    installer {
      installUrl = 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.52/bin/apache-tomcat-7.0.52.tar.gz'
      downloadDir = file("$buildDir/download")
      extractDir = file("$buildDir/extract")
    }
  }
}

project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
  cargo {
    deployable {
      if (runningWithCoverage()) {
        file = file('build/instrumented_libs/cloudfoundry-identity-login-server-' + version + '.war')
      } else {
        file = file('build/libs/cloudfoundry-identity-login-server-' + version + '.war')
      }
      context = 'uaa'
    }

    local {
      if (runningWithCoverage()) {
        extraClasspath = files(configurations.coberturaJar.files)
      }
    }
  }
}

apply plugin: 'cobertura'

cobertura {
  coverageFormats = ['xml', 'html']
  coverageMergeDatafiles = [
    new File("build/cobertura/cobertura.ser"),
    new File(System.properties['java.io.tmpdir'] + 'cargo/conf/cobertura.ser')
  ]
}

apply plugin: 'coveralls'

def runningWithCoverage() {
  project.tasks.findByName('instrument').enabled
}

def databaseType() {
  List activeProfiles = (System.getenv('TESTENV') ?: '').split(',')
  if (activeProfiles.contains('mysql')) {
    'mysql'
  } else if (activeProfiles.contains('postgresql')) {
    'postgresql'
  } else {
    'hsqldb'
  }
}
